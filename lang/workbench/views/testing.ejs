<!-- Test case editing area -->
<a name="divEdit"></a>
<h2>Test cases</h2>
<div id="txtReport" style="border:1px solid silver; background:#eeeeee; border-radius:3px; width: 785px; height: 1.5em; margin-bottom: 1em; padding-left:1em;"></div>
<div style="text-align: right; margin-bottom:5px; padding-bottom:5px;">
    <button id="btnRunAll" style="width:7em;">Run again</button>
</div>
<div style="border:1px solid silver; background:#eeeeee; border-radius:3px; width: 785px; height: 1.5em; margin-bottom: 1em; padding-left:1em;">Test case details: See <a href="#devNotes">Notes</a></div>

<!-- Test report area - driven by QUnit framework -->
<a name="tResult"></a>
<div id="qunit"></div>
<div id="qunit-fixture"></div>

<!-- Developer notes -->
<a name="devNotes"></a>
<h3>For testbench developers</h3>
<ul>
    <li>
        Test corpus (i.e. the test cases) are stored in the file <code>/public/js/testing_corpus.js</code>. To change the tests, edit
        that file and recommit to the git repo.
    </li>
    <li>
        All test cases must be written in valid JSON format. Note: All keys must be enclosed in quotes!
    </li>
    <li>
        The whole test case corpus is written as a single array, with each element being one test case.
    </li>
    <li>
        <div>Each test case must be written as a valid JSON descriptor. Format of descriptor:</div>
<pre>{
    "module":               {String} <i>(optional)</i>
    "title":                {String},
    "program":              {String}
    "expectedResult":       {Function} | {Object} | {primitive}
    "expectToFail:          {boolean}
}</pre>
        <div>
            Elements denote:
            <dl>
                <dt><code>module</code></dt>
                    <dd>
                        Setting this field, will create a new test sub section. All subsequent test cases with no <code>module</code>
                        field will automatically be assigned to that new sub section.
                    </dd>
                <dt><code>title</code></dt>
                    <dd>
                        Descriptive title, will appear next to the test result in the <a href="#tResult">test result list</a>.
                    </dd>
                <dt><code>program</code></dt>
                    <dd>
                        The MAL program we are testing the parser with.
                    </dd>
                <dt><code>expectedResult</code></dt>
                    <dd>
                        The expected result. What we do with it depends on <code>expectToFail</code> and 
                        on the type of <code>expectedResult</code>.
                        <ul>
                            <li>
                                If <code>expectToFail</code> is <code>true</code>: We will ignore <code>expectedResult</code>.
                            </li>
                            <li>
                                If <code>expectToFail</code> is <code>false</code> and <code>expectedResult</code>
                                is of type <code>function</code>: Test runner will execute the function. Function 
                                must return a value. The test runner will deep compare that value with the value
                                returned by the parser. If they both match, the test has passed.
                            </li>
                            <li>
                                If <code>expectToFail</code> is <code>false</code> and <code>expectedResult</code>
                                is <b>not</b> of type <code>function</code>: Test runner will deep compare <code>expectedResult</code>
                                with the value returned by the parser. If they both match, the test has passed.
                            </li>
                        </ul>
                    </dd>
                <dt><code>expectToFail</code></dt>
                    <dd>
                        <ul>
                            <li>
                                If <code>true</code>: We expect the parsing step to fail ( e.g. <code>test.program</code> has deliberate
                                syntax error(s) ).
                            </li>
                            <li>
                                If <code>false</code>: We expect the parsing step to be successfull and 
                                the parser to return <code>expectedResult</code>.
                            </li>
                        </ul>
                    </dd>
            </dl>
        </div>
    </li>
</ul>

<!-- Scripting: QUnit framework -->
<script src="/vendor/qunit/qunit-2.0.1.js"></script>

<!-- Scripting: Test object setup -->
<script src="/js/init.js"></script>

<!-- Scripting: Test corpus -->
<script src="/js/testing/default_corpus/testing_corpus.js"></script>

<!-- Scripting: Test runner. You must include the test corpus before including this file -->
<script src="/js/testing.js"></script>
