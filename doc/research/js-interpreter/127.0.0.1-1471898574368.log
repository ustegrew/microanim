'state' => 
    'node' => 
        'type' => 'ExpressionStatement' [string]
        'start' => '14' [number]
        'end' => '20' [number]
        'expression' => 
            'type' => 'AssignmentExpression' [string]
            'start' => '14' [number]
            'end' => '19' [number]
            'operator' => '=' [string]
            'left' => 
                'type' => 'Identifier' [string]
                'start' => '14' [number]
                'end' => '15' [number]
                'name' => 'a' [string]
            'right' => 
                'type' => 'Literal' [string]
                'start' => '18' [number]
                'end' => '19' [number]
                'value' => '5' [number]
                'raw' => '5' [string]
    'done' => 'true' [boolean]

'state' => 
    'node' => 
        'type' => 'ExpressionStatement' [string]
        'start' => '14' [number]
        'end' => '20' [number]
        'expression' => 
            'type' => 'AssignmentExpression' [string]
            'start' => '14' [number]
            'end' => '19' [number]
            'operator' => '=' [string]
            'left' => 
                'type' => 'Identifier' [string]
                'start' => '14' [number]
                'end' => '15' [number]
                'name' => 'a' [string]
            'right' => 
                'type' => 'Literal' [string]
                'start' => '18' [number]
                'end' => '19' [number]
                'value' => '5' [number]
                'raw' => '5' [string]
    'done' => 'true' [boolean]
    'value' => 
        'data' => '5' [number]
        'isPrimitive' => 'true' [boolean]
        'type' => 'number' [string]
        'toBoolean' => 'function () {return Boolean(this.data);}' [function]
        'toNumber' => 'function () {return Number(this.data);}' [function]
        'toString' => 'function () {return String(this.data);}' [function]
        'valueOf' => 'function () {return this.data;}' [function]
        'parent' => 
            'isPrimitive' => 'false' [boolean]
            'type' => 'function' [string]
            'parent' => 
                'isPrimitive' => 'false' [boolean]
                'type' => 'function' [string]
                'parent' => null
                'fixed' => 
                'nonenumerable' => 
                    'toString' => 'true' [boolean]
                    'valueOf' => 'true' [boolean]
                'properties' => 
                    'prototype' => 
                        'isPrimitive' => 'false' [boolean]
                        'type' => 'object' [string]
                        'parent' => null
                        'fixed' => 
                        'nonenumerable' => 
                            'apply' => 'true' [boolean]
                            'call' => 'true' [boolean]
                            'toString' => 'true' [boolean]
                            'valueOf' => 'true' [boolean]
                        'properties' => 
                            'apply' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'parentScope' => ... nesting too deep (>= 8 levels)
                                'node' => ... nesting too deep (>= 8 levels)
                            'call' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'parentScope' => ... nesting too deep (>= 8 levels)
                                'node' => ... nesting too deep (>= 8 levels)
                            'toString' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'nativeFunc' => ... nesting too deep (>= 8 levels)
                            'valueOf' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'nativeFunc' => ... nesting too deep (>= 8 levels)
                        'toBoolean' => 'function () {return true;}' [function]
                        'toNumber' => 'function () {return NaN;}' [function]
                        'toString' => 'function () {return '[' + this.type + ']';}' [function]
                        'valueOf' => 'function () {return this;}' [function]
                    'toString' => 
                        'isPrimitive' => 'false' [boolean]
                        'type' => 'function' [string]
                        'parent' => *
                        'fixed' => 
                            'length' => 'true' [boolean]
                        'nonenumerable' => 
                        'properties' => 
                            'prototype' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                            'length' => 
                                'data' => ... nesting too deep (>= 8 levels)
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                        'toBoolean' => 'function () {return true;}' [function]
                        'toNumber' => 'function () {return NaN;}' [function]
                        'toString' => 'function () {return '[' + this.type + ']';}' [function]
                        'valueOf' => 'function () {return this;}' [function]
                        'nativeFunc' => 'function () {
    return thisInterpreter.createPrimitive(this.toString());
  }' [function]
                    'valueOf' => 
                        'isPrimitive' => 'false' [boolean]
                        'type' => 'function' [string]
                        'parent' => *
                        'fixed' => 
                            'length' => 'true' [boolean]
                        'nonenumerable' => 
                        'properties' => 
                            'prototype' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                            'length' => 
                                'data' => ... nesting too deep (>= 8 levels)
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                        'toBoolean' => 'function () {return true;}' [function]
                        'toNumber' => 'function () {return NaN;}' [function]
                        'toString' => 'function () {return '[' + this.type + ']';}' [function]
                        'valueOf' => 'function () {return this;}' [function]
                        'nativeFunc' => 'function () {
    return thisInterpreter.createPrimitive(this.valueOf());
  }' [function]
                'toBoolean' => 'function () {return true;}' [function]
                'toNumber' => 'function () {return NaN;}' [function]
                'toString' => 'function () {return '[' + this.type + ']';}' [function]
                'valueOf' => 'function () {return this;}' [function]
                'nativeFunc' => 'function (var_args) {
    if (this.parent == thisInterpreter.FUNCTION) {
      // Called with new.
      var newFunc = this;
    } else {
      var newFunc = thisInterpreter.createObject(thisInterpreter.FUNCTION);
    }
    if (arguments.length) {
      var code = arguments[arguments.length - 1].toString();
    } else {
      var code = '';
    }
    var args = [];
    for (var i = 0; i < arguments.length - 1; i++) {
      args.push(arguments[i].toString());
    }
    args = args.join(', ');
    if (args.indexOf(')') != -1) {
      throw new SyntaxError('Function arg string contains parenthesis');
    }
    // Interestingly, the scope for constructed functions is the global scope,
    // even if they were constructed in some other scope.
    newFunc.parentScope =
        thisInterpreter.stateStack[thisInterpreter.stateStack.length - 1].scope;
    var ast = acorn.parse('$ = function(' + args + ') {' + code + '};');
    newFunc.node = ast.body[0].expression.right;
    thisInterpreter.setProperty(newFunc, 'length',
        thisInterpreter.createPrimitive(newFunc.node.length), true);
    return newFunc;
  }' [function]
            'fixed' => 
                'length' => 'true' [boolean]
            'nonenumerable' => 
            'properties' => 
                'prototype' => 
                    'isPrimitive' => 'false' [boolean]
                    'type' => 'object' [string]
                    'parent' => 
                        'isPrimitive' => 'false' [boolean]
                        'type' => 'function' [string]
                        'parent' => 
                            'isPrimitive' => 'false' [boolean]
                            'type' => 'function' [string]
                            'parent' => null
                            'fixed' => 
                            'nonenumerable' => 
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                            'properties' => 
                                'prototype' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                            'toBoolean' => 'function () {return true;}' [function]
                            'toNumber' => 'function () {return NaN;}' [function]
                            'toString' => 'function () {return '[' + this.type + ']';}' [function]
                            'valueOf' => 'function () {return this;}' [function]
                            'nativeFunc' => 'function (var_args) {
    if (this.parent == thisInterpreter.FUNCTION) {
      // Called with new.
      var newFunc = this;
    } else {
      var newFunc = thisInterpreter.createObject(thisInterpreter.FUNCTION);
    }
    if (arguments.length) {
      var code = arguments[arguments.length - 1].toString();
    } else {
      var code = '';
    }
    var args = [];
    for (var i = 0; i < arguments.length - 1; i++) {
      args.push(arguments[i].toString());
    }
    args = args.join(', ');
    if (args.indexOf(')') != -1) {
      throw new SyntaxError('Function arg string contains parenthesis');
    }
    // Interestingly, the scope for constructed functions is the global scope,
    // even if they were constructed in some other scope.
    newFunc.parentScope =
        thisInterpreter.stateStack[thisInterpreter.stateStack.length - 1].scope;
    var ast = acorn.parse('$ = function(' + args + ') {' + code + '};');
    newFunc.node = ast.body[0].expression.right;
    thisInterpreter.setProperty(newFunc, 'length',
        thisInterpreter.createPrimitive(newFunc.node.length), true);
    return newFunc;
  }' [function]
                        'fixed' => 
                            'length' => 'true' [boolean]
                        'nonenumerable' => 
                        'properties' => 
                            'prototype' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                            'length' => 
                                'data' => ... nesting too deep (>= 8 levels)
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                            'keys' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'nativeFunc' => ... nesting too deep (>= 8 levels)
                        'toBoolean' => 'function () {return true;}' [function]
                        'toNumber' => 'function () {return NaN;}' [function]
                        'toString' => 'function () {return '[' + this.type + ']';}' [function]
                        'valueOf' => 'function () {return this;}' [function]
                        'nativeFunc' => 'function (var_args) {
    if (this.parent == thisInterpreter.OBJECT) {
      // Called with new.
      var newObj = this;
    } else {
      var newObj = thisInterpreter.createObject(thisInterpreter.OBJECT);
    }
    return newObj;
  }' [function]
                    'fixed' => 
                    'nonenumerable' => 
                        'toExponential' => 'true' [boolean]
                        'toFixed' => 'true' [boolean]
                        'toPrecision' => 'true' [boolean]
                    'properties' => 
                        'toExponential' => 
                            'isPrimitive' => 'false' [boolean]
                            'type' => 'function' [string]
                            'parent' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'nativeFunc' => ... nesting too deep (>= 8 levels)
                            'fixed' => 
                                'length' => ... nesting too deep (>= 8 levels)
                            'nonenumerable' => 
                            'properties' => 
                                'prototype' => ... nesting too deep (>= 8 levels)
                                'length' => ... nesting too deep (>= 8 levels)
                            'toBoolean' => 'function () {return true;}' [function]
                            'toNumber' => 'function () {return NaN;}' [function]
                            'toString' => 'function () {return '[' + this.type + ']';}' [function]
                            'valueOf' => 'function () {return this;}' [function]
                            'nativeFunc' => 'function (fractionDigits) {
    fractionDigits = fractionDigits ? fractionDigits.toNumber() : undefined;
    var n = this.toNumber();
    return thisInterpreter.createPrimitive(n.toExponential(fractionDigits));
  }' [function]
                        'toFixed' => 
                            'isPrimitive' => 'false' [boolean]
                            'type' => 'function' [string]
                            'parent' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'nativeFunc' => ... nesting too deep (>= 8 levels)
                            'fixed' => 
                                'length' => ... nesting too deep (>= 8 levels)
                            'nonenumerable' => 
                            'properties' => 
                                'prototype' => ... nesting too deep (>= 8 levels)
                                'length' => ... nesting too deep (>= 8 levels)
                            'toBoolean' => 'function () {return true;}' [function]
                            'toNumber' => 'function () {return NaN;}' [function]
                            'toString' => 'function () {return '[' + this.type + ']';}' [function]
                            'valueOf' => 'function () {return this;}' [function]
                            'nativeFunc' => 'function (digits) {
    digits = digits ? digits.toNumber() : undefined;
    var n = this.toNumber();
    return thisInterpreter.createPrimitive(n.toFixed(digits));
  }' [function]
                        'toPrecision' => 
                            'isPrimitive' => 'false' [boolean]
                            'type' => 'function' [string]
                            'parent' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'nativeFunc' => ... nesting too deep (>= 8 levels)
                            'fixed' => 
                                'length' => ... nesting too deep (>= 8 levels)
                            'nonenumerable' => 
                            'properties' => 
                                'prototype' => ... nesting too deep (>= 8 levels)
                                'length' => ... nesting too deep (>= 8 levels)
                            'toBoolean' => 'function () {return true;}' [function]
                            'toNumber' => 'function () {return NaN;}' [function]
                            'toString' => 'function () {return '[' + this.type + ']';}' [function]
                            'valueOf' => 'function () {return this;}' [function]
                            'nativeFunc' => 'function (precision) {
    precision = precision ? precision.toNumber() : undefined;
    var n = this.toNumber();
    return thisInterpreter.createPrimitive(n.toPrecision(precision));
  }' [function]
                    'toBoolean' => 'function () {return true;}' [function]
                    'toNumber' => 'function () {return NaN;}' [function]
                    'toString' => 'function () {return '[' + this.type + ']';}' [function]
                    'valueOf' => 'function () {return this;}' [function]
                'length' => 
                    'data' => '1' [number]
                    'isPrimitive' => 'true' [boolean]
                    'type' => 'number' [string]
                    'toBoolean' => 'function () {return Boolean(this.data);}' [function]
                    'toNumber' => 'function () {return Number(this.data);}' [function]
                    'toString' => 'function () {return String(this.data);}' [function]
                    'valueOf' => 'function () {return this.data;}' [function]
                    'parent' => undefined
                'MAX_VALUE' => 
                    'data' => '1.7976931348623157e+308' [number]
                    'isPrimitive' => 'true' [boolean]
                    'type' => 'number' [string]
                    'toBoolean' => 'function () {return Boolean(this.data);}' [function]
                    'toNumber' => 'function () {return Number(this.data);}' [function]
                    'toString' => 'function () {return String(this.data);}' [function]
                    'valueOf' => 'function () {return this.data;}' [function]
                    'parent' => *
                'MIN_VALUE' => 
                    'data' => '5e-324' [number]
                    'isPrimitive' => 'true' [boolean]
                    'type' => 'number' [string]
                    'toBoolean' => 'function () {return Boolean(this.data);}' [function]
                    'toNumber' => 'function () {return Number(this.data);}' [function]
                    'toString' => 'function () {return String(this.data);}' [function]
                    'valueOf' => 'function () {return this.data;}' [function]
                    'parent' => *
                'NaN' => 
                    'data' => 'NaN' [number]
                    'isPrimitive' => 'true' [boolean]
                    'type' => 'number' [string]
                    'toBoolean' => 'function () {return Boolean(this.data);}' [function]
                    'toNumber' => 'function () {return Number(this.data);}' [function]
                    'toString' => 'function () {return String(this.data);}' [function]
                    'valueOf' => 'function () {return this.data;}' [function]
                    'parent' => *
                'NEGATIVE_INFINITY' => 
                    'data' => '-Infinity' [number]
                    'isPrimitive' => 'true' [boolean]
                    'type' => 'number' [string]
                    'toBoolean' => 'function () {return Boolean(this.data);}' [function]
                    'toNumber' => 'function () {return Number(this.data);}' [function]
                    'toString' => 'function () {return String(this.data);}' [function]
                    'valueOf' => 'function () {return this.data;}' [function]
                    'parent' => *
                'POSITIVE_INFINITY' => 
                    'data' => 'Infinity' [number]
                    'isPrimitive' => 'true' [boolean]
                    'type' => 'number' [string]
                    'toBoolean' => 'function () {return Boolean(this.data);}' [function]
                    'toNumber' => 'function () {return Number(this.data);}' [function]
                    'toString' => 'function () {return String(this.data);}' [function]
                    'valueOf' => 'function () {return this.data;}' [function]
                    'parent' => *
            'toBoolean' => 'function () {return true;}' [function]
            'toNumber' => 'function () {return NaN;}' [function]
            'toString' => 'function () {return '[' + this.type + ']';}' [function]
            'valueOf' => 'function () {return this;}' [function]
            'nativeFunc' => 'function (value) {
    value = value ? value.toNumber() : 0;
    if (this.parent == thisInterpreter.NUMBER) {
      this.toBoolean = function() {return !!value;};
      this.toNumber = function() {return value;};
      this.toString = function() {return String(value);};
      return undefined;
    } else {
      return thisInterpreter.createPrimitive(value);
    }
  }' [function]

'state' => 
    'node' => 
        'type' => 'ExpressionStatement' [string]
        'start' => '21' [number]
        'end' => '31' [number]
        'expression' => 
            'type' => 'AssignmentExpression' [string]
            'start' => '21' [number]
            'end' => '30' [number]
            'operator' => '=' [string]
            'left' => 
                'type' => 'Identifier' [string]
                'start' => '21' [number]
                'end' => '22' [number]
                'name' => 'b' [string]
            'right' => 
                'type' => 'BinaryExpression' [string]
                'start' => '25' [number]
                'end' => '30' [number]
                'left' => 
                    'type' => 'Identifier' [string]
                    'start' => '25' [number]
                    'end' => '26' [number]
                    'name' => 'a' [string]
                'operator' => '&' [string]
                'right' => 
                    'type' => 'Literal' [string]
                    'start' => '29' [number]
                    'end' => '30' [number]
                    'value' => '3' [number]
                    'raw' => '3' [string]
    'done' => 'true' [boolean]

'state' => 
    'node' => 
        'type' => 'ExpressionStatement' [string]
        'start' => '21' [number]
        'end' => '31' [number]
        'expression' => 
            'type' => 'AssignmentExpression' [string]
            'start' => '21' [number]
            'end' => '30' [number]
            'operator' => '=' [string]
            'left' => 
                'type' => 'Identifier' [string]
                'start' => '21' [number]
                'end' => '22' [number]
                'name' => 'b' [string]
            'right' => 
                'type' => 'BinaryExpression' [string]
                'start' => '25' [number]
                'end' => '30' [number]
                'left' => 
                    'type' => 'Identifier' [string]
                    'start' => '25' [number]
                    'end' => '26' [number]
                    'name' => 'a' [string]
                'operator' => '&' [string]
                'right' => 
                    'type' => 'Literal' [string]
                    'start' => '29' [number]
                    'end' => '30' [number]
                    'value' => '3' [number]
                    'raw' => '3' [string]
    'done' => 'true' [boolean]
    'value' => 
        'data' => '1' [number]
        'isPrimitive' => 'true' [boolean]
        'type' => 'number' [string]
        'toBoolean' => 'function () {return Boolean(this.data);}' [function]
        'toNumber' => 'function () {return Number(this.data);}' [function]
        'toString' => 'function () {return String(this.data);}' [function]
        'valueOf' => 'function () {return this.data;}' [function]
        'parent' => 
            'isPrimitive' => 'false' [boolean]
            'type' => 'function' [string]
            'parent' => 
                'isPrimitive' => 'false' [boolean]
                'type' => 'function' [string]
                'parent' => null
                'fixed' => 
                'nonenumerable' => 
                    'toString' => 'true' [boolean]
                    'valueOf' => 'true' [boolean]
                'properties' => 
                    'prototype' => 
                        'isPrimitive' => 'false' [boolean]
                        'type' => 'object' [string]
                        'parent' => null
                        'fixed' => 
                        'nonenumerable' => 
                            'apply' => 'true' [boolean]
                            'call' => 'true' [boolean]
                            'toString' => 'true' [boolean]
                            'valueOf' => 'true' [boolean]
                        'properties' => 
                            'apply' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'parentScope' => ... nesting too deep (>= 8 levels)
                                'node' => ... nesting too deep (>= 8 levels)
                            'call' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'parentScope' => ... nesting too deep (>= 8 levels)
                                'node' => ... nesting too deep (>= 8 levels)
                            'toString' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'nativeFunc' => ... nesting too deep (>= 8 levels)
                            'valueOf' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'nativeFunc' => ... nesting too deep (>= 8 levels)
                        'toBoolean' => 'function () {return true;}' [function]
                        'toNumber' => 'function () {return NaN;}' [function]
                        'toString' => 'function () {return '[' + this.type + ']';}' [function]
                        'valueOf' => 'function () {return this;}' [function]
                    'toString' => 
                        'isPrimitive' => 'false' [boolean]
                        'type' => 'function' [string]
                        'parent' => *
                        'fixed' => 
                            'length' => 'true' [boolean]
                        'nonenumerable' => 
                        'properties' => 
                            'prototype' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                            'length' => 
                                'data' => ... nesting too deep (>= 8 levels)
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                        'toBoolean' => 'function () {return true;}' [function]
                        'toNumber' => 'function () {return NaN;}' [function]
                        'toString' => 'function () {return '[' + this.type + ']';}' [function]
                        'valueOf' => 'function () {return this;}' [function]
                        'nativeFunc' => 'function () {
    return thisInterpreter.createPrimitive(this.toString());
  }' [function]
                    'valueOf' => 
                        'isPrimitive' => 'false' [boolean]
                        'type' => 'function' [string]
                        'parent' => *
                        'fixed' => 
                            'length' => 'true' [boolean]
                        'nonenumerable' => 
                        'properties' => 
                            'prototype' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                            'length' => 
                                'data' => ... nesting too deep (>= 8 levels)
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                        'toBoolean' => 'function () {return true;}' [function]
                        'toNumber' => 'function () {return NaN;}' [function]
                        'toString' => 'function () {return '[' + this.type + ']';}' [function]
                        'valueOf' => 'function () {return this;}' [function]
                        'nativeFunc' => 'function () {
    return thisInterpreter.createPrimitive(this.valueOf());
  }' [function]
                'toBoolean' => 'function () {return true;}' [function]
                'toNumber' => 'function () {return NaN;}' [function]
                'toString' => 'function () {return '[' + this.type + ']';}' [function]
                'valueOf' => 'function () {return this;}' [function]
                'nativeFunc' => 'function (var_args) {
    if (this.parent == thisInterpreter.FUNCTION) {
      // Called with new.
      var newFunc = this;
    } else {
      var newFunc = thisInterpreter.createObject(thisInterpreter.FUNCTION);
    }
    if (arguments.length) {
      var code = arguments[arguments.length - 1].toString();
    } else {
      var code = '';
    }
    var args = [];
    for (var i = 0; i < arguments.length - 1; i++) {
      args.push(arguments[i].toString());
    }
    args = args.join(', ');
    if (args.indexOf(')') != -1) {
      throw new SyntaxError('Function arg string contains parenthesis');
    }
    // Interestingly, the scope for constructed functions is the global scope,
    // even if they were constructed in some other scope.
    newFunc.parentScope =
        thisInterpreter.stateStack[thisInterpreter.stateStack.length - 1].scope;
    var ast = acorn.parse('$ = function(' + args + ') {' + code + '};');
    newFunc.node = ast.body[0].expression.right;
    thisInterpreter.setProperty(newFunc, 'length',
        thisInterpreter.createPrimitive(newFunc.node.length), true);
    return newFunc;
  }' [function]
            'fixed' => 
                'length' => 'true' [boolean]
            'nonenumerable' => 
            'properties' => 
                'prototype' => 
                    'isPrimitive' => 'false' [boolean]
                    'type' => 'object' [string]
                    'parent' => 
                        'isPrimitive' => 'false' [boolean]
                        'type' => 'function' [string]
                        'parent' => 
                            'isPrimitive' => 'false' [boolean]
                            'type' => 'function' [string]
                            'parent' => null
                            'fixed' => 
                            'nonenumerable' => 
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                            'properties' => 
                                'prototype' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                            'toBoolean' => 'function () {return true;}' [function]
                            'toNumber' => 'function () {return NaN;}' [function]
                            'toString' => 'function () {return '[' + this.type + ']';}' [function]
                            'valueOf' => 'function () {return this;}' [function]
                            'nativeFunc' => 'function (var_args) {
    if (this.parent == thisInterpreter.FUNCTION) {
      // Called with new.
      var newFunc = this;
    } else {
      var newFunc = thisInterpreter.createObject(thisInterpreter.FUNCTION);
    }
    if (arguments.length) {
      var code = arguments[arguments.length - 1].toString();
    } else {
      var code = '';
    }
    var args = [];
    for (var i = 0; i < arguments.length - 1; i++) {
      args.push(arguments[i].toString());
    }
    args = args.join(', ');
    if (args.indexOf(')') != -1) {
      throw new SyntaxError('Function arg string contains parenthesis');
    }
    // Interestingly, the scope for constructed functions is the global scope,
    // even if they were constructed in some other scope.
    newFunc.parentScope =
        thisInterpreter.stateStack[thisInterpreter.stateStack.length - 1].scope;
    var ast = acorn.parse('$ = function(' + args + ') {' + code + '};');
    newFunc.node = ast.body[0].expression.right;
    thisInterpreter.setProperty(newFunc, 'length',
        thisInterpreter.createPrimitive(newFunc.node.length), true);
    return newFunc;
  }' [function]
                        'fixed' => 
                            'length' => 'true' [boolean]
                        'nonenumerable' => 
                        'properties' => 
                            'prototype' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                            'length' => 
                                'data' => ... nesting too deep (>= 8 levels)
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                            'keys' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'nativeFunc' => ... nesting too deep (>= 8 levels)
                        'toBoolean' => 'function () {return true;}' [function]
                        'toNumber' => 'function () {return NaN;}' [function]
                        'toString' => 'function () {return '[' + this.type + ']';}' [function]
                        'valueOf' => 'function () {return this;}' [function]
                        'nativeFunc' => 'function (var_args) {
    if (this.parent == thisInterpreter.OBJECT) {
      // Called with new.
      var newObj = this;
    } else {
      var newObj = thisInterpreter.createObject(thisInterpreter.OBJECT);
    }
    return newObj;
  }' [function]
                    'fixed' => 
                    'nonenumerable' => 
                        'toExponential' => 'true' [boolean]
                        'toFixed' => 'true' [boolean]
                        'toPrecision' => 'true' [boolean]
                    'properties' => 
                        'toExponential' => 
                            'isPrimitive' => 'false' [boolean]
                            'type' => 'function' [string]
                            'parent' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'nativeFunc' => ... nesting too deep (>= 8 levels)
                            'fixed' => 
                                'length' => ... nesting too deep (>= 8 levels)
                            'nonenumerable' => 
                            'properties' => 
                                'prototype' => ... nesting too deep (>= 8 levels)
                                'length' => ... nesting too deep (>= 8 levels)
                            'toBoolean' => 'function () {return true;}' [function]
                            'toNumber' => 'function () {return NaN;}' [function]
                            'toString' => 'function () {return '[' + this.type + ']';}' [function]
                            'valueOf' => 'function () {return this;}' [function]
                            'nativeFunc' => 'function (fractionDigits) {
    fractionDigits = fractionDigits ? fractionDigits.toNumber() : undefined;
    var n = this.toNumber();
    return thisInterpreter.createPrimitive(n.toExponential(fractionDigits));
  }' [function]
                        'toFixed' => 
                            'isPrimitive' => 'false' [boolean]
                            'type' => 'function' [string]
                            'parent' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'nativeFunc' => ... nesting too deep (>= 8 levels)
                            'fixed' => 
                                'length' => ... nesting too deep (>= 8 levels)
                            'nonenumerable' => 
                            'properties' => 
                                'prototype' => ... nesting too deep (>= 8 levels)
                                'length' => ... nesting too deep (>= 8 levels)
                            'toBoolean' => 'function () {return true;}' [function]
                            'toNumber' => 'function () {return NaN;}' [function]
                            'toString' => 'function () {return '[' + this.type + ']';}' [function]
                            'valueOf' => 'function () {return this;}' [function]
                            'nativeFunc' => 'function (digits) {
    digits = digits ? digits.toNumber() : undefined;
    var n = this.toNumber();
    return thisInterpreter.createPrimitive(n.toFixed(digits));
  }' [function]
                        'toPrecision' => 
                            'isPrimitive' => 'false' [boolean]
                            'type' => 'function' [string]
                            'parent' => 
                                'isPrimitive' => ... nesting too deep (>= 8 levels)
                                'type' => ... nesting too deep (>= 8 levels)
                                'parent' => ... nesting too deep (>= 8 levels)
                                'fixed' => ... nesting too deep (>= 8 levels)
                                'nonenumerable' => ... nesting too deep (>= 8 levels)
                                'properties' => ... nesting too deep (>= 8 levels)
                                'toBoolean' => ... nesting too deep (>= 8 levels)
                                'toNumber' => ... nesting too deep (>= 8 levels)
                                'toString' => ... nesting too deep (>= 8 levels)
                                'valueOf' => ... nesting too deep (>= 8 levels)
                                'nativeFunc' => ... nesting too deep (>= 8 levels)
                            'fixed' => 
                                'length' => ... nesting too deep (>= 8 levels)
                            'nonenumerable' => 
                            'properties' => 
                                'prototype' => ... nesting too deep (>= 8 levels)
                                'length' => ... nesting too deep (>= 8 levels)
                            'toBoolean' => 'function () {return true;}' [function]
                            'toNumber' => 'function () {return NaN;}' [function]
                            'toString' => 'function () {return '[' + this.type + ']';}' [function]
                            'valueOf' => 'function () {return this;}' [function]
                            'nativeFunc' => 'function (precision) {
    precision = precision ? precision.toNumber() : undefined;
    var n = this.toNumber();
    return thisInterpreter.createPrimitive(n.toPrecision(precision));
  }' [function]
                    'toBoolean' => 'function () {return true;}' [function]
                    'toNumber' => 'function () {return NaN;}' [function]
                    'toString' => 'function () {return '[' + this.type + ']';}' [function]
                    'valueOf' => 'function () {return this;}' [function]
                'length' => 
                    'data' => '1' [number]
                    'isPrimitive' => 'true' [boolean]
                    'type' => 'number' [string]
                    'toBoolean' => 'function () {return Boolean(this.data);}' [function]
                    'toNumber' => 'function () {return Number(this.data);}' [function]
                    'toString' => 'function () {return String(this.data);}' [function]
                    'valueOf' => 'function () {return this.data;}' [function]
                    'parent' => undefined
                'MAX_VALUE' => 
                    'data' => '1.7976931348623157e+308' [number]
                    'isPrimitive' => 'true' [boolean]
                    'type' => 'number' [string]
                    'toBoolean' => 'function () {return Boolean(this.data);}' [function]
                    'toNumber' => 'function () {return Number(this.data);}' [function]
                    'toString' => 'function () {return String(this.data);}' [function]
                    'valueOf' => 'function () {return this.data;}' [function]
                    'parent' => *
                'MIN_VALUE' => 
                    'data' => '5e-324' [number]
                    'isPrimitive' => 'true' [boolean]
                    'type' => 'number' [string]
                    'toBoolean' => 'function () {return Boolean(this.data);}' [function]
                    'toNumber' => 'function () {return Number(this.data);}' [function]
                    'toString' => 'function () {return String(this.data);}' [function]
                    'valueOf' => 'function () {return this.data;}' [function]
                    'parent' => *
                'NaN' => 
                    'data' => 'NaN' [number]
                    'isPrimitive' => 'true' [boolean]
                    'type' => 'number' [string]
                    'toBoolean' => 'function () {return Boolean(this.data);}' [function]
                    'toNumber' => 'function () {return Number(this.data);}' [function]
                    'toString' => 'function () {return String(this.data);}' [function]
                    'valueOf' => 'function () {return this.data;}' [function]
                    'parent' => *
                'NEGATIVE_INFINITY' => 
                    'data' => '-Infinity' [number]
                    'isPrimitive' => 'true' [boolean]
                    'type' => 'number' [string]
                    'toBoolean' => 'function () {return Boolean(this.data);}' [function]
                    'toNumber' => 'function () {return Number(this.data);}' [function]
                    'toString' => 'function () {return String(this.data);}' [function]
                    'valueOf' => 'function () {return this.data;}' [function]
                    'parent' => *
                'POSITIVE_INFINITY' => 
                    'data' => 'Infinity' [number]
                    'isPrimitive' => 'true' [boolean]
                    'type' => 'number' [string]
                    'toBoolean' => 'function () {return Boolean(this.data);}' [function]
                    'toNumber' => 'function () {return Number(this.data);}' [function]
                    'toString' => 'function () {return String(this.data);}' [function]
                    'valueOf' => 'function () {return this.data;}' [function]
                    'parent' => *
            'toBoolean' => 'function () {return true;}' [function]
            'toNumber' => 'function () {return NaN;}' [function]
            'toString' => 'function () {return '[' + this.type + ']';}' [function]
            'valueOf' => 'function () {return this;}' [function]
            'nativeFunc' => 'function (value) {
    value = value ? value.toNumber() : 0;
    if (this.parent == thisInterpreter.NUMBER) {
      this.toBoolean = function() {return !!value;};
      this.toNumber = function() {return value;};
      this.toString = function() {return String(value);};
      return undefined;
    } else {
      return thisInterpreter.createPrimitive(value);
    }
  }' [function]

